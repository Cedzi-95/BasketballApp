{
  "version": 3,
  "sources": ["../../expect-type/dist/branding.js", "../../expect-type/dist/messages.js", "../../expect-type/dist/overloads.js", "../../expect-type/dist/utils.js", "../../expect-type/dist/index.js"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @internal\r\n */\r\nconst inverted = Symbol('inverted');\r\n/**\r\n * @internal\r\n */\r\nconst expectNull = Symbol('expectNull');\r\n/**\r\n * @internal\r\n */\r\nconst expectUndefined = Symbol('expectUndefined');\r\n/**\r\n * @internal\r\n */\r\nconst expectNumber = Symbol('expectNumber');\r\n/**\r\n * @internal\r\n */\r\nconst expectString = Symbol('expectString');\r\n/**\r\n * @internal\r\n */\r\nconst expectBoolean = Symbol('expectBoolean');\r\n/**\r\n * @internal\r\n */\r\nconst expectVoid = Symbol('expectVoid');\r\n/**\r\n * @internal\r\n */\r\nconst expectFunction = Symbol('expectFunction');\r\n/**\r\n * @internal\r\n */\r\nconst expectObject = Symbol('expectObject');\r\n/**\r\n * @internal\r\n */\r\nconst expectArray = Symbol('expectArray');\r\n/**\r\n * @internal\r\n */\r\nconst expectSymbol = Symbol('expectSymbol');\r\n/**\r\n * @internal\r\n */\r\nconst expectAny = Symbol('expectAny');\r\n/**\r\n * @internal\r\n */\r\nconst expectUnknown = Symbol('expectUnknown');\r\n/**\r\n * @internal\r\n */\r\nconst expectNever = Symbol('expectNever');\r\n/**\r\n * @internal\r\n */\r\nconst expectNullable = Symbol('expectNullable');\r\n/**\r\n * @internal\r\n */\r\nconst expectBigInt = Symbol('expectBigInt');\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @internal\r\n */\r\nconst secret = Symbol('secret');\r\n/**\r\n * @internal\r\n */\r\nconst mismatch = Symbol('mismatch');\r\n/**\r\n * A type which should match anything passed as a value but *doesn't*\r\n * match {@linkcode Mismatch}. It helps TypeScript select the right overload\r\n * for {@linkcode PositiveExpectTypeOf.toEqualTypeOf | .toEqualTypeOf()} and\r\n * {@linkcode PositiveExpectTypeOf.toMatchTypeOf | .toMatchTypeOf()}.\r\n *\r\n * @internal\r\n */\r\nconst avalue = Symbol('avalue');\r\n", "\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.expectTypeOf = void 0;\r\n__exportStar(require(\"./branding\"), exports); // backcompat, consider removing in next major version\r\n__exportStar(require(\"./messages\"), exports); // backcompat, consider removing in next major version\r\n__exportStar(require(\"./overloads\"), exports);\r\n__exportStar(require(\"./utils\"), exports); // backcompat, consider removing in next major version\r\nconst fn = () => true;\r\n/**\r\n * Similar to Jest's `expect`, but with type-awareness.\r\n * Gives you access to a number of type-matchers that let you make assertions about the\r\n * form of a reference or generic type parameter.\r\n *\r\n * @example\r\n * ```ts\r\n * import { foo, bar } from '../foo'\r\n * import { expectTypeOf } from 'expect-type'\r\n *\r\n * test('foo types', () => {\r\n *   // make sure `foo` has type { a: number }\r\n *   expectTypeOf(foo).toMatchTypeOf({ a: 1 })\r\n *   expectTypeOf(foo).toHaveProperty('a').toBeNumber()\r\n *\r\n *   // make sure `bar` is a function taking a string:\r\n *   expectTypeOf(bar).parameter(0).toBeString()\r\n *   expectTypeOf(bar).returns.not.toBeAny()\r\n * })\r\n * ```\r\n *\r\n * @description\r\n * See the [full docs](https://npmjs.com/package/expect-type#documentation) for lots more examples.\r\n */\r\nconst expectTypeOf = (_actual) => {\r\n    const nonFunctionProperties = [\r\n        'parameters',\r\n        'returns',\r\n        'resolves',\r\n        'not',\r\n        'items',\r\n        'constructorParameters',\r\n        'thisParameter',\r\n        'instance',\r\n        'guards',\r\n        'asserts',\r\n        'branded',\r\n    ];\r\n    const obj = {\r\n        /* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n        toBeAny: fn,\r\n        toBeUnknown: fn,\r\n        toBeNever: fn,\r\n        toBeFunction: fn,\r\n        toBeObject: fn,\r\n        toBeArray: fn,\r\n        toBeString: fn,\r\n        toBeNumber: fn,\r\n        toBeBoolean: fn,\r\n        toBeVoid: fn,\r\n        toBeSymbol: fn,\r\n        toBeNull: fn,\r\n        toBeUndefined: fn,\r\n        toBeNullable: fn,\r\n        toBeBigInt: fn,\r\n        toMatchTypeOf: fn,\r\n        toEqualTypeOf: fn,\r\n        toBeConstructibleWith: fn,\r\n        toMatchObjectType: fn,\r\n        toExtend: fn,\r\n        map: exports.expectTypeOf,\r\n        toBeCallableWith: exports.expectTypeOf,\r\n        extract: exports.expectTypeOf,\r\n        exclude: exports.expectTypeOf,\r\n        pick: exports.expectTypeOf,\r\n        omit: exports.expectTypeOf,\r\n        toHaveProperty: exports.expectTypeOf,\r\n        parameter: exports.expectTypeOf,\r\n    };\r\n    const getterProperties = nonFunctionProperties;\r\n    getterProperties.forEach((prop) => Object.defineProperty(obj, prop, { get: () => (0, exports.expectTypeOf)({}) }));\r\n    return obj;\r\n};\r\nexports.expectTypeOf = expectTypeOf;\r\n"],
  "mappings": "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",
  "names": ["exports"]
}
